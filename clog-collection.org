# -*- Mode: POLY-ORG ;-*- ---
#+Title: A set of CLOG Plugins
#+OPTIONS: tex:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+STARTUP: latexpreview
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: literate-lang lisp
#+PROPERTY: literate-load yes
#+PROPERTY: literate-insert-header no
#+STARTUP: entitiespretty
* Table of Contents                                               :noexport:TOC:
- [[#introduction][Introduction]]
- [[#preparation][Preparation]]
  - [[#compilation-options][compilation options]]
  - [[#a-new-package][a new package]]
  - [[#switch-to-this-package][switch to this package]]
- [[#utilities][Utilities]]
  - [[#create-hash-table-from-plist][create hash table from plist]]
  - [[#encode-associated-list-into-json-string][encode associated list into json string]]
- [[#cytoscape][cytoscape]]
  - [[#definition][definition]]
  - [[#how-to-create-it][how to create it]]
  - [[#demo][Demo]]
    - [[#demo-1][demo 1]]
- [[#test][Test]]
  - [[#main-page][main page]]
  - [[#entry-point-for-demo-page][entry point for demo page]]
  - [[#start-test][start test]]

* Introduction
CLOG Plugin for [[https://js.cytoscape.org/][Cytoscape.js]]
* Preparation
** compilation options
In dev environment, we will disable possible optimization.
#+BEGIN_SRC lisp :load dev
(proclaim '(optimize
            (compilation-speed 0)
            (debug 3)
            (safety 3)
            (space 0)
            (speed 0)))
#+END_SRC
** a new package
Let's create an individual package for this module.
#+BEGIN_SRC lisp
(defpackage #:clog-collection
  (:use :cl :alexandria :iterate :clog :clog-gui #:clog-web)
  (:shadowing-import-from #:clog #:rotate #:escape-string #:multiply)
  (:export )
  (:documentation "CLOG plugin for Cytoscaple.js"))
#+END_SRC
** switch to this package
#+BEGIN_SRC lisp
(in-package :clog-collection)
#+END_SRC
* Utilities
** create hash table from plist
#+BEGIN_SRC lisp
(defun plist->hash (&rest args)
  (plist-hash-table args :test #'equal))
#+END_SRC

** encode associated list into json string
#+BEGIN_SRC lisp
(defun ->json (obj)
  (with-output-to-string (stream)
    (yason:encode obj stream)))
#+END_SRC

* cytoscape
** definition
#+BEGIN_SRC lisp
(defclass clog-cytoscape (clog-element)
  ((elements :initarg :elements :accessor cytoscape-elements)
   (style :initarg :style :accessor cytoscape-style)
   (layout :initarg :layout :accessor cytoscape-layout))
  (:documentation "clog-cytoscape Object."))
#+END_SRC
** how to create it
#+BEGIN_SRC lisp
(defgeneric create-clog-cytoscape (obj &key
                                         elements style layout
                                         hidden
                                         class
                                         html-id
                                         load-js
                                         auto-place)
  (:documentation "Create a new clog-cytoscape object in lisp."))

(defmethod create-clog-cytoscape ((obj clog:clog-obj)
                                  &key
                                    elements style layout
                                    (hidden nil)
                                    (class nil)
                                    (html-id (symbol-name (gensym "cytoscape")))
                                    (load-js t)
                                   (width 400)
                                  (height 300)
                                    (auto-place t))
  "Create control - used at design time and in code"
  (let ((obj (create-div obj
                             :class class
                             :hidden hidden
                             :html-id html-id
                             :auto-place auto-place)))
    (set-geometry obj :width width :height height)
    (change-class obj 'clog-cytoscape)
    (when load-js
      (load-script (html-document (connection-data-item obj "clog-body"))
                   "https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.25.0/cytoscape.min.js"))
    (setf (cytoscape-elements obj) elements
        (cytoscape-style obj) style
        (cytoscape-layout obj) layout)
    (js-execute obj (format nil "cytoscape({ container: document.getElementById('~a'),
        elements: ~a,
        style: ~a,
        layout: ~a
});"
                            (html-id obj)
                            (->json elements)
                            (->json style)
                            (->json layout)))
    obj))
#+END_SRC
** Demo
*** demo 1
#+BEGIN_SRC lisp
(defun cytoscape-demo1 (row)
  (let* ((elements (list (plist->hash "data" (plist->hash "id" "a"))
                         (plist->hash "data" (plist->hash "id" "b"))
                         (plist->hash "data" (plist->hash "id" "ab" "source" "a" "target" "b"))))
         (style (list (plist->hash "selector" "node"
                                   "style" (plist->hash "background-color" "#666"
                                                        "label" "data(id)"))
                      (plist->hash "selector" "edge"
                                   "style" (plist->hash "width" 3
                                                        "line-color" "#ccc"
                                                        "target-arrow-color" "#ccc"
                                                        "target-arrow-shape" "triangle"
                                                        "curve-style" "bezier"))))
         (layout (plist->hash "name" "grid" "rows" 1))
         (obj (create-clog-cytoscape row :width 600 :height 600 :elements elements :style style :layout layout :load-js nil)))
    obj))
#+END_SRC


* Test
** main page
#+BEGIN_SRC lisp
(defun demo-page (body)
  #+dev(js-execute body "clog_debug = true")
  (let* ((row1    (create-web-auto-row    body))
         (column1 (create-web-auto-column row1))
         (row2    (create-web-auto-row    body))
         (demo1 (create-button column1 :content "demo1")))
    (center-children row1)
    (set-on-click demo1 (lambda (obj)
                          (declare (ignore obj))
                          (setf (inner-html row2) "")
                          (cytoscape-demo1 row2)
                          (center-children row2)))))
#+END_SRC
** entry point for demo page
#+BEGIN_SRC lisp
(defun on-new-demo-window (body)
  (demo-page body))
#+END_SRC
** start test
#+BEGIN_SRC lisp
(defun start-test ()
  (initialize 'on-new-demo-window
              :host "127.0.0.1"
              :port 8090
              :static-root (merge-pathnames "./www/"
                                            (asdf:system-source-directory :clog-collection)))
  (open-browser))
#+END_SRC

