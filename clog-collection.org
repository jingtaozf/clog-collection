# -*- Mode: POLY-ORG ;-*- ---
#+Title: A set of CLOG Plugins
#+OPTIONS: tex:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+STARTUP: latexpreview
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: literate-lang lisp
#+PROPERTY: literate-load yes
#+PROPERTY: literate-insert-header no
#+STARTUP: entitiespretty
* Table of Contents                                               :noexport:TOC:
- [[#introduction][Introduction]]
- [[#preparation][Preparation]]
  - [[#compilation-options][compilation options]]
  - [[#a-new-package][a new package]]
  - [[#switch-to-this-package][switch to this package]]
- [[#utilities][Utilities]]
  - [[#the-generic-method-to-get-the-js-id--for-an-object-created-by-javascript][the generic method to get the js id  for an object created by javascript]]
  - [[#the-generic-method-to-set-the-event--for-an-object-created-by-javascript][the generic method to set the event  for an object created by javascript]]
  - [[#create-hash-table-from-plist][create hash table from plist]]
  - [[#encode-associated-list-into-json-string][encode associated list into json string]]
  - [[#keymap-handler][keymap handler]]
    - [[#data-structure][data structure]]
    - [[#keymap-event-for-a-key][keymap event for a key]]
- [[#cytoscape][cytoscape]]
  - [[#definition][definition]]
  - [[#how-to-create-it][how to create it]]
    - [[#generic-method][generic method]]
    - [[#implementation][implementation]]
  - [[#demo][Demo]]
    - [[#demo-1][demo 1]]
- [[#codemirror][codemirror]]
  - [[#definition-1][definition]]
  - [[#how-to-create-it-1][how to create it]]
    - [[#js][js]]
    - [[#create-clog-codemirror][create-clog-codemirror]]
  - [[#text-value][text value]]
    - [[#get][get]]
    - [[#setf][setf]]
  - [[#keymap][keymap]]
  - [[#demo-2][Demo]]
    - [[#demo-1-1][demo 1]]
- [[#jsonview][jsonview]]
  - [[#definition-2][definition]]
  - [[#how-to-create-it-2][how to create it]]
    - [[#js-1][js]]
    - [[#lisp][lisp]]
  - [[#demo-3][Demo]]
    - [[#demo-1-2][demo 1]]
- [[#test][Test]]
  - [[#main-page][main page]]
  - [[#entry-point-for-demo-page][entry point for demo page]]
  - [[#start-test][start test]]

* Introduction
CLOG Plugin for [[https://js.cytoscape.org/][Cytoscape.js]]
* Preparation
** compilation options
In dev environment, we will disable possible optimization.
#+BEGIN_SRC lisp :load dev
(proclaim '(optimize
            (compilation-speed 0)
            (debug 3)
            (safety 3)
            (space 0)
            (speed 0)))
#+END_SRC
** a new package
Let's create an individual package for this module.
#+BEGIN_SRC lisp
(defpackage #:clog-collection
  (:use :cl :alexandria :iterate :clog :clog-gui #:clog-web)
  (:shadowing-import-from #:clog #:rotate #:escape-string #:multiply)
  (:export
   #:js-id
   #:make-keymap
   #:keymap-key
   #:keymap-event
   #:keymap-handler
   #:create-clog-cytoscape
   #:create-clog-codemirror
   #:create-clog-jsonview)
  (:documentation "CLOG plugin for Cytoscaple.js"))
#+END_SRC
** switch to this package
#+BEGIN_SRC lisp
(in-package :clog-collection)
#+END_SRC
* Utilities
** the generic method to get the js id  for an object created by javascript
#+BEGIN_SRC lisp
(defgeneric js-id (clog-element)
  (:documentation "Access to javascript object (private)")
  (:method (clog-element)
    (format nil "clog['js_~A']" (html-id clog-element))))
#+END_SRC
** the generic method to set the event  for an object created by javascript
#+BEGIN_SRC lisp
(defgeneric set-js-event (obj event handler)
  (:method (obj event handler)
    (set-on-event obj (format nil "~(~a~)-~A" (type-of obj) event) handler)
    (if handler
        (js-execute obj (format nil "~A.on('~A', function()~
                                  {~A.trigger('~(~a~)-~A')})"
                                (js-id obj)
                                event
                                (jquery obj)
                                (type-of obj)
                                event))
        (js-execute obj (format nil "~A.off('~A')" (js-id obj) event)))))
#+END_SRC

** create hash table from plist
#+BEGIN_SRC lisp
(defun plist->hash (&rest args)
  (plist-hash-table args :test #'equal))
#+END_SRC

** encode associated list into json string
#+BEGIN_SRC lisp
(defun ->json (obj)
  (with-output-to-string (stream)
    (yason:encode obj stream)))
#+END_SRC

** keymap handler
*** data structure
#+BEGIN_SRC lisp
(defstruct keymap
  ;; the key name, for example `Shift-Enter'
  (key (required-argument "key") :type string)
  ;; a handler in lisp side for the above key.
  (handler (required-argument "handler") :type function)
  ;; the return value in js side, to determine whether or not the default browser behaviour should take place as well. 
  (return-value nil :type boolean))
#+END_SRC
*** keymap event for a key
#+BEGIN_SRC lisp
(defgeneric keymap-event (keymap)
  (:documentation "keymap event name")
  (:method (keymap)
    (format nil "keymap-~a" (keymap-key keymap))))
#+END_SRC

* cytoscape
** definition
#+BEGIN_SRC lisp
(defclass clog-cytoscape (clog-element)
  ((elements :initarg :elements :accessor cytoscape-elements)
   (style :initarg :style :accessor cytoscape-style)
   (layout :initarg :layout :accessor cytoscape-layout))
  (:documentation "clog-cytoscape Object."))
#+END_SRC
** how to create it
*** generic method
#+BEGIN_SRC lisp
(defgeneric create-clog-cytoscape (obj &key
                                         elements style layout
                                         width height
                                         hidden
                                         class
                                         html-id
                                         load-js
                                         auto-place)
  (:documentation "Create a new clog-cytoscape object in lisp."))
#+END_SRC
*** implementation
#+BEGIN_SRC lisp
(defmethod create-clog-cytoscape ((obj clog:clog-obj)
                                  &key
                                    elements style layout
                                    width height
                                    (hidden nil)
                                    (class nil)
                                    (html-id (symbol-name (gensym "cytoscape")))
                                    (load-js t)
                                    (auto-place t))
  "Create control - used at design time and in code"
  (let ((obj (create-div obj
                         :class class
                         :hidden hidden
                         :html-id html-id
                         :auto-place auto-place)))
    (change-class obj 'clog-cytoscape)
    (when load-js
      (load-script (html-document (connection-data-item obj "clog-body"))
                   "https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.25.0/cytoscape.min.js"))
    (setf (cytoscape-elements obj) elements
          (cytoscape-style obj) style
          (cytoscape-layout obj) layout)
    (when (or width height)
      (set-geometry obj :width width :height height))

    (js-execute obj (format nil "~A = cytoscape({ container: document.getElementById('~A'),
        elements: ~a,
        style: ~a,
        layout: ~a
});"
                            (js-id obj)
                            (html-id obj)
                            (->json elements)
                            (->json style)
                            (->json layout)))
    obj))
#+END_SRC
** Demo
*** demo 1
#+BEGIN_SRC lisp
(defun cytoscape-demo1 (row)
  (let* ((elements (list (plist->hash "data" (plist->hash "id" "a"))
                         (plist->hash "data" (plist->hash "id" "b"))
                         (plist->hash "data" (plist->hash "id" "ab" "source" "a" "target" "b"))))
         (style (list (plist->hash "selector" "node"
                                   "style" (plist->hash "background-color" "#666"
                                                        "label" "data(id)"))
                      (plist->hash "selector" "edge"
                                   "style" (plist->hash "width" 3
                                                        "line-color" "#ccc"
                                                        "target-arrow-color" "#ccc"
                                                        "target-arrow-shape" "triangle"
                                                        "curve-style" "bezier"))))
         (layout (plist->hash "name" "grid" "rows" 1))
         (obj (create-clog-cytoscape row :width 600 :height 600 :elements elements :style style :layout layout :load-js nil)))
    obj))
#+END_SRC


* codemirror
** definition
#+BEGIN_SRC lisp
(defclass clog-codemirror (clog-element)
  ((language :initarg :language :accessor cytoscape-language))
  (:documentation "clog-codemirror Object."))
#+END_SRC
** how to create it
*** js
#+NAME: clog.js.codemirror.new
#+BEGIN_SRC js
let language = new CodeMirror.Compartment();
let tabSize  = new CodeMirror.Compartment();

let state = CodeMirror.EditorState.create({
    extensions: [
	CodeMirror.basicSetup,
	tabSize.of(CodeMirror.EditorState.tabSize.of(~a))
	~@[,~a~]
    ]
});
clog['codemirror']  = clog['codemirror'] || {};
~A = new CodeMirror.EditorView({
    state,
    parent: document.getElementById(~s)
});
~A.viewState.clog = '~A';
#+END_SRC

*** create-clog-codemirror
**** generic method
#+BEGIN_SRC lisp
(defgeneric create-clog-codemirror (obj &key
                                          tab-size
                                          keymaps
                                          extentions
                                          hidden
                                          class
                                          html-id
                                          auto-place)
  (:documentation "Create a new clog-codemirror object in lisp."))
#+END_SRC
**** implementation
#+BEGIN_SRC lisp
(defmethod create-clog-codemirror ((obj clog:clog-obj)
                                   &key
                                     (tab-size 8)
                                   ;; a list of keymap for code mirror
                                     keymaps
                                     extentions
                                     (hidden nil)
                                     (class nil)
                                     (html-id (symbol-name (gensym "codemirror")))
                                     (auto-place t))
  "Create control - used at design time and in code"
  (let* ((obj (create-div obj
                          :class class
                          :hidden hidden
                          :html-id html-id
                          :auto-place auto-place))
         (keymap-js-code (with-output-to-string (*standard-output*)
                           (when keymaps
                             (write-string "CodeMirror.keymap.of([")
                             (iter (for keymap in keymaps)
                               (format t "{key: '~a', run: (view) => {~a.trigger('~a'); return ~a}}"
                                       (keymap-key keymap)
                                       (jquery obj)
                                       (keymap-event keymap)
                                       (if (keymap-return-value keymap)
                                           "true"
                                           "false"))
                               (unless (first-iteration-p)
                                 (format t ",~%")))
                             (write-string "])"))))
         (extentions (format nil "~@[~a, ~]~a" extentions keymap-js-code)))
    (change-class obj 'clog-codemirror)
    (js-execute obj (format nil clog.js.codemirror.new
                            tab-size extentions
                            (js-id obj)
                            (html-id obj)
                            (js-id obj)
                            (html-id obj)))
    (iter (for keymap in keymaps)
      (set-on-event obj (keymap-event keymap) (keymap-handler keymap)))
    obj))
#+END_SRC
** text value
*** get
#+BEGIN_SRC lisp
(defmethod text-value ((obj clog-codemirror))
  (js-query obj (format nil "~A.viewState.state.doc.toString()"
                        (js-id obj))))
#+END_SRC
*** setf
#+BEGIN_SRC lisp
(defmethod (setf text-value) (value (obj clog-codemirror))
  (js-execute obj (format nil "~A.dispatch({ changes: {from: 0, to: ~A.viewState.state.doc.length, insert: ~s}}); "
                          (js-id obj) (js-id obj) value)))
#+END_SRC
** keymap
** Demo
*** demo 1
#+BEGIN_SRC lisp
(defun codemirror-demo1 (row)
  (let* ((obj (create-clog-codemirror row :extentions "language.of(CodeMirror.javascript.javascript())"
                                          :keymaps (list (make-keymap :key "Shift-Enter"
                                                                      :return-value t
                                                                      :handler #'(lambda (obj)
                                                                                   (clog-web-alert obj "Alert"
                                                                                                   (format nil  "~a: Shift-Enter" (html-id obj))
                                                                                                   :time-out 3)))))))
    (set-geometry obj :width 600 :height 600)
    obj))
#+END_SRC
* jsonview
** definition
#+BEGIN_SRC lisp
(defclass clog-jsonview (clog-element)
  ((language :initarg :language :accessor cytoscape-language))
  (:documentation "clog-jsonview Object."))
#+END_SRC
** how to create it
*** js
#+NAME: clog.js.jsonview.new
#+BEGIN_SRC js
let language = new Jsonview.Compartment();
let tabSize  = new Jsonview.Compartment();

let state = Jsonview.EditorState.create({
    extensions: [
	Jsonview.basicSetup,
	tabSize.of(Jsonview.EditorState.tabSize.of(~a))
	~@[,~a~]
    ]
});
clog['jsonview']  = clog['jsonview'] || {};
clog['jsonview'][~s] = new Jsonview.EditorView({
    state,
    parent: document.getElementById(~s)
});
#+END_SRC

*** lisp
**** generic method
#+BEGIN_SRC lisp
(defgeneric create-clog-jsonview (obj &key
                                        ;; Can be either a string or a json object.
                                        json
                                        expand
                                        hidden
                                        class
                                        html-id
                                        auto-place)
  (:documentation "Create a new clog-jsonview object in lisp."))
#+END_SRC
**** implementation
#+BEGIN_SRC lisp
(defmethod create-clog-jsonview ((obj clog:clog-obj)
                                 &key
                                   json
                                   expand
                                   (hidden nil)
                                   (class nil)
                                   (html-id (symbol-name (gensym "jsonview")))
                                   (auto-place t))
  "Create control - used at design time and in code"
  (let ((obj (create-div obj
                         :class class
                         :hidden hidden
                         :html-id html-id
                         :auto-place auto-place))
        (json-string (if (stringp json)
                                json
                                (->json json))))
    (change-class obj 'clog-jsonview)

    (js-execute obj (format nil "~A = jsonview.create(~s); jsonview.render(~A, document.getElementById('~a'));if (~A) jsonview.expand(~A)"
                            (js-id obj)
                            json-string
                            (js-id obj)
                            (html-id obj)
                            (if expand
                                "true"
                                "false")
                            (js-id obj)))
    obj))
#+END_SRC

** Demo
*** demo 1
#+BEGIN_SRC lisp
(defun jsonview-demo1 (row)
  (let* ((obj (create-clog-jsonview row :json (plist->hash "givenName" "Vas" "familyName" "Kostyuk" "age" 30
                                                           "children" (list (plist->hash "givenName" "Natalia" "age" 5)
                                                                            (plist->hash "givenName" "Aida" "age" 17))
                                                           "address" (plist->hash "city" "Kiev" "street" "Krasnoarmeyskaya" "house" 1))
                                    :expand t)))
    (set-geometry obj :width 600 :height 600)
    obj))
#+END_SRC
* Test
** main page
#+BEGIN_SRC lisp
(defun demo-page (body)
  #+dev(debug-mode body)
  (let* ((row1    (create-web-auto-row    body))
         (column1 (create-web-auto-column row1 :class "w3-margin"))
         (column2 (create-web-auto-column row1 :class "w3-margin"))
         (column3 (create-web-auto-column row1 :class "w3-margin"))
         (row2    (create-web-auto-row    body))
         (demo1 (create-button column1 :content "Cytoscape-Demo1"))
         (demo2 (create-button column2 :content "CodeMirror-Demo1"))
         (demo3 (create-button column3 :content "json-view-Demo1")))
    (center-children row1)
    (labels ((%set-on-click (button callback)
               (set-on-click button (lambda (obj)
                                      (declare (ignore obj))
                                      (setf (inner-html row2) "")
                                      (funcall callback row2)
                                      (center-children row2)))))
      (%set-on-click demo1 'cytoscape-demo1)
      (%set-on-click demo2 'codemirror-demo1)
      (%set-on-click demo3 'jsonview-demo1))))
#+END_SRC
** entry point for demo page
#+BEGIN_SRC lisp
(defun on-new-demo-window (body)
  (demo-page body))
#+END_SRC
** start test
#+BEGIN_SRC lisp
(defun start-test ()
  #+dev(setf clog-connection:*verbose-output* t)
  (initialize 'on-new-demo-window
              :host "127.0.0.1"
              :port 8090
              :static-root (merge-pathnames "./www/"
                                            (asdf:system-source-directory :clog-collection)))
  (open-browser))
#+END_SRC

